/*
Version: 2013-09-23~2018-01-16
Author: Yong-Jun Lin

References:
Definition of a TTL signal
  http://digital.natinst.com/public.nsf/$CXIV/ATTACH-AEEE-89LM9U/$FILE/TTL%20Specification.gif
On Teensyduino, Serial.begin() actually accesses USB (12 Mbit/sec) so the baud rate does not matter.
  https://www.pjrc.com/teensy/td_serial.html
On Teensyduino, Serial1.begin() accesses hardware serial UART. This is not useful for the current project.
  https://www.pjrc.com/teensy/td_uart.html
Serial.send_now() and transmit buffering
  https://www.pjrc.com/teensy/td_serial.html#txbuffer
Serial communication
 http://arduino.cc/en/Tutorial/ReadASCIIString
 http://arduinobasics.blogspot.com/2012/07/arduino-basics-simple-arduino-serial.html
 http://playground.arduino.cc/interfacing/python
 http://arduino.cc/en/Tutorial/SerialCallResponse
 Getting string:
 http://forum.arduino.cc/index.php/topic,45629.0.html
 http://forum.arduino.cc/index.php?topic=41888.0
Serial communication latency
 http://neophob.com/2011/04/serial-latency-teensy-vs-arduino/

History:
2013-09-23
 1. Teensy 2.0 may be better than Teensy++ 2.0 in that it is smaller.
2018-01-06
 1. This demo is modified from the official LED blink demo (File\Examples\Teensy\Tutorial1\Blink)
 2. This demo simulates TTL signals driving TMS pulses. Just use the LED pin as the positive pin.
2018-01-07
 1. Only consider Teensy 2 but not 3 because TTL relies on 5V but not 3V logic
 2. In Brain Products Recorder_Release_Notes_1-21-0201.pdf, the release notes of Version 1.20.0801 (December 2014) states that the minimum length of trigger signal is 2 ms for 1000 Hz and 0.8 ms for 2500 Hz recording. So choose 3 ms for now.
2018-01-08
 1. Added #if defined() and #elif defined() macros to generalize to applicable environments (Teensy 2.0 and Teensy++ 2.0, not yet Arduino)
2018-01-09
 1. Tested Magstim Super Rapid 2 Plus 1 and found that 3 ms TTL can reliably trigger TMS pulse.
 2. Set pin mode as INPUT_PULLUP so that the default is HIGH (5V). When the switch is on or when the button is pressed, it goes to LOW (0V; GND).
 3. Set the serial communication speed (can be arbitrary for Teensy, just use 57600 so that it is also a reasonable number for Arduino)
2018-01-10
 1. Branched out to develop a high-level protocol based on serial communication between the board and a computer.
 2. Controlled LED by serial communication.
 3. Reduced the test case to character echoing.
 4. Instead of echoing, respond by ++ to an incoming character.
 5. Tested whether CR+LF will be transmitted as part of the string.
2018-01-12
 1. ï»¿Handshake, parsing command, and executing command (old syntax since 2013)
 2. Redesigned communication protocol
2018-01-15
 1. Updated the communication steps with the following hierarchy:
    Setup+Loop(Handshake+RealDeal(SaveToBuffer+PerformSettings(ResetBuffer)+Perform command(ResetBuffer)+ResetDevice))
2018-01-16
 1. Combined the new serial communication syntax code with the button/switch code so that there is a reset button for easy benchmarking. Fleshed out ResetDevice().
 2. Test the TTL signals generated by a shift register with an oscillope or an EEG recorder.

Future:
 1. Test if 1 ms TTL can trigger TMS pulses
 2. Test the shortest TTL that can trigger TMS pulses
 3. Test the TMS response time offset from TTL onset with an oscilloscope
 4. Explore hardware vs. software serial speed
 5. Examine packet round trip time. Better to measure it as a function of string length.
 6. Test if Serial.send_now() matters for temporal precision! It might only matter for response pads.


Copyright (C) 2013-2019  Yong-Jun Lin
This file is part of MarkStim, a TMS trigger/EEG event registration 
device. See <https://yongjunlin.com/MarkStim/> for the documentation 
and details.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/


// Constants about hardware level wiring
#if defined(__AVR_ATmega32U4__) // Teensy 2.0
//Avoid pin 11 (LED)
const unsigned int pinData = 12;  //A10
const unsigned int pinClock = 13;  //A9
const unsigned int pinLatch = 14;  //A8
#elif defined(__AVR_AT90USB1286__)  // Teensy++ 2.0
//Avoid pin 6 (LED)
const unsigned int pinData = 45;  //F7
const unsigned int pinClock = 44;  //F6
const unsigned int pinLatch = 43;  //F5
#endif


void setup()
{
  pinMode(pinData, OUTPUT);
  pinMode(pinClock, OUTPUT);
  pinMode(pinLatch, OUTPUT);
  return;
}

void loop()
{
  Demo();
}

void Demo()
{
  for (byte triggerVal = 0; triggerVal < 256; triggerVal++)
  {
    delay(250); // (ms)
    updateShiftRegister(triggerVal);
    //So the Q0 (2^0) pin will have square waves at 4 Hz
    //So the Q1 (2^1) pin will have square waves at 2 Hz
    //So the Q2 (2^2) pin will have square waves at 1 Hz
    //So the Q3 (2^3) pin will have square waves at 0.5 Hz
    //So the Q4 (2^4) pin will have square waves at 0.25 Hz
    //So the Q5 (2^5) pin will have square waves at 0.125 Hz
    //So the Q6 (2^5) pin will have square waves at 0.0625 Hz
    //So the Q7 (2^5) pin will have square waves at 0.03125 Hz
    //Use an oscilloscope to verify
    //Or use a EEG trigger monitor to view if the trigger values are in cycles of 0~255 (usually 0 is not recorded, indiciating no events at all)
  }
}

void updateShiftRegister(byte triggerVal)
{
  digitalWrite(pinLatch, LOW);     //Pulls the chips latch low
  shiftOut(pinData, pinClock, MSBFIRST, triggerVal); //Shifts out the 8 bits to the shift register
  digitalWrite(pinLatch, HIGH);   //Pulls the latch high displaying the data
}

